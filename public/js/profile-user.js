document.addEventListener('DOMContentLoaded', function() {

    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-theme');
    }

    const themeSwitcher = document.getElementById('themeSwitcher');
    themeSwitcher.addEventListener('click', function() {
        document.body.classList.toggle('dark-theme');
        const isDark = document.body.classList.contains('dark-theme');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        this.textContent = isDark ? '‚òÄÔ∏è' : 'üåì';
    });

    const isDark = document.body.classList.contains('dark-theme');
    themeSwitcher.textContent = isDark ? '‚òÄÔ∏è' : 'üåì';
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞
    const avatarUpload = document.getElementById('avatarUpload');
    const avatarPreview = document.getElementById('avatarPreview');
    const userAvatar = document.getElementById('userAvatar');
    
    const avatarInput = document.getElementById('avatarUpload');
    if (avatarInput) {
        avatarInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    avatarPreview.src = event.target.result;
                    userAvatar.src = event.target.result;
                };
                reader.readAsDataURL(file);
            }
        });
    }
    
    // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ —Ä–æ–∑–¥—ñ–ª–∞–º–∏
    const menuItems = document.querySelectorAll('.profile-menu a');
    const contentSections = document.querySelectorAll('.content-section');
    
    menuItems.forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            
            // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å —É –≤—Å—ñ—Ö –ø—É–Ω–∫—Ç–∞—Ö –º–µ–Ω—é
            menuItems.forEach(i => i.classList.remove('active'));
            // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É
            this.classList.add('active');
            
            // –û—Ç—Ä–∏–º—É—î–º–æ ID —Ä–æ–∑–¥—ñ–ª—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏
            const sectionId = this.getAttribute('data-section');
            
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ —Ä–æ–∑–¥—ñ–ª–∏
            contentSections.forEach(section => {
                section.classList.remove('active');
            });
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª
            document.getElementById(`${sectionId}-section`).classList.add('active');
        });
    });
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö
    const personalForm = document.getElementById('personalForm');
    if (personalForm) {
        personalForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ
            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const email = document.getElementById('email').value;
            const phone = document.getElementById('phone').value;
            
            document.getElementById('userName').textContent = `${firstName} ${lastName}`;
            document.getElementById('userEmail').textContent = email;
            
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ä–º—É
            this.submit();
        });
    }
    
    // –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    const passwordForm = document.getElementById('passwordForm');
    if (passwordForm) {
        let isSubmitting = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

        passwordForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
            if (isSubmitting) {
                return;
            }

            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (newPassword !== confirmPassword) {
                alert('–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å!');
                return;
            }

            if (newPassword.length < 6) {
                alert('–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤!');
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
            isSubmitting = true;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            const submitBtn = passwordForm.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ó–º—ñ–Ω—é—î–º–æ...';
            submitBtn.disabled = true;

            try {
                const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
                
                if (!csrfToken) {
                    throw new Error('CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }

                const response = await fetch('/profile/change-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': csrfToken,
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        current_password: currentPassword,
                        new_password: newPassword,
                        new_password_confirmation: confirmPassword
                    })
                });

                const data = await response.json();

                if (response.ok && data.success) {
                    alert('–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!');
                    passwordForm.reset();
                    // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    if (document.activeElement) {
                        document.activeElement.blur();
                    }
                } else {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    if (data.errors) {
                        let errorMessage = '';
                        for (const field in data.errors) {
                            errorMessage += data.errors[field].join('\n') + '\n';
                        }
                        alert('–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:\n' + errorMessage);
                    } else {
                        alert(data.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è!');
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è:', error);
                alert('–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
            } finally {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ —Ñ–ª–∞–≥
                isSubmitting = false;
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });
    }
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∞–¥—Ä–µ—Å–∏
    const addAddressBtn = document.getElementById('addAddressBtn');
    if (addAddressBtn) {
        addAddressBtn.addEventListener('click', function() {
            // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∞–¥—Ä–µ—Å–∏
            alert('–§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∞–¥—Ä–µ—Å–∏ –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ');
        });
    }
    
    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏" ---
    function renderWishlist() {
        const wishlistContainer = document.querySelector('.wishlist');
        if (!wishlistContainer) return;

        // –ü–æ–ª—É—á–∞–µ–º id –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ localStorage
        const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ window.products (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π) –∏–ª–∏ –∏–∑ API
        let allProducts = window.products || [];

        // –ï—Å–ª–∏ window.products –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API
        function fillWishlist(products) {
            wishlistContainer.innerHTML = '';
            if (!favorites.length) {
                wishlistContainer.innerHTML = '<div style="padding:2rem;text-align:center;color:#888;">–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤</div>';
                return;
            }
            products.filter(p => favorites.includes(p.id)).forEach(product => {
                const imageUrl = product.image ? product.image : '/img/no-image.png';
                const title = product.title || product.name || '';
                const price = product.price ? product.price + ' –≥—Ä–Ω' : '';
                wishlistContainer.innerHTML += `
                    <div class="wishlist-item">
                        <div class="wishlist-img" style="background-image: url('${imageUrl}');"></div>
                        <div class="wishlist-info">
                            <h4>${title}</h4>
                            <p class="wishlist-price">${price}</p>
                            <div class="wishlist-actions">
                                <button class="btn btn-danger btn-sm remove-wishlist-btn" data-id="${product.id}"><i class="fas fa-trash"></i></button>
                                <button class="btn btn-primary btn-sm"><i class="fas fa-shopping-cart"></i></button>
                            </div>
                        </div>
                    </div>
                `;
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            wishlistContainer.querySelectorAll('.remove-wishlist-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = parseInt(this.dataset.id);
                    let favs = JSON.parse(localStorage.getItem('favorites') || '[]');
                    favs = favs.filter(fid => fid !== id);
                    localStorage.setItem('favorites', JSON.stringify(favs));
                    renderWishlist();
                });
            });
        }

        if (allProducts.length) {
            fillWishlist(allProducts);
        } else {
            // –ï—Å–ª–∏ window.products –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∏–∑ API
            fetch('/api/products')
                .then(res => res.json())
                .then(products => {
                    window.products = products;
                    fillWishlist(products);
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
                    wishlistContainer.innerHTML = '<div style="padding:2rem;text-align:center;color:#c00;">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤</div>';
                });
        }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å wishlist –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ "–û–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏"
    const wishlistMenu = document.querySelector('.profile-menu a[data-section="wishlist"]');
    if (wishlistMenu) {
        wishlistMenu.addEventListener('click', function() {
            renderWishlist();
        });
    }

    // --- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ "–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å" ---
    const ordersMenu = document.querySelector('.profile-menu a[data-section="orders"]');
    if (ordersMenu) {
        ordersMenu.addEventListener('click', function() {
            loadUserOrders();
        });
    }
    // –¢–∞–∫–∂–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ, –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –∞–∫—Ç–∏–≤–µ–Ω
    if (document.getElementById('orders-section')?.classList.contains('active')) {
        loadUserOrders();
    }

    // –ü—Ä–æ—Ñ–∏–ª—å–Ω–æ–µ –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
    const profileDropdownBtn = document.getElementById('profileDropdownBtn');
    const profileDropdownMenu = document.getElementById('profileDropdownMenu');
    if (profileDropdownBtn && profileDropdownMenu) {
        profileDropdownBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            this.parentElement.classList.toggle('open');
        });
        document.addEventListener('click', function(e) {
            if (!profileDropdownBtn.contains(e.target)) {
                profileDropdownBtn.parentElement.classList.remove('open');
            }
        });
    }

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    function loadUserOrders() {
        const ordersTable = document.getElementById('ordersTable');
        const ordersLoading = document.getElementById('orders-loading');
        if (!ordersTable) return;
        const tbody = ordersTable.querySelector('tbody');
        if (!tbody) return;

        if (ordersLoading) ordersLoading.style.display = 'block';
        tbody.innerHTML = '';

        fetch('/profile/orders', {
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
            }
        })
        .then(res => {
            if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
            }
            return res.json();
        })
        .then(data => {
            if (ordersLoading) ordersLoading.style.display = 'none';
            if (!Array.isArray(data) || data.length === 0) {
                tbody.innerHTML = `<tr><td colspan="6" style="text-align:center;color:#888;">–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å</td></tr>`;
                return;
            }
            data.forEach(order => {
                tbody.innerHTML += `
                    <tr>
                        <td>#ORD-${order.id}</td>
                        <td>${order.created_at ? new Date(order.created_at).toLocaleDateString('uk-UA') : ''}</td>
                        <td>${order.product_name || order.service_name || ''}</td>
                        <td>${order.product_price ? order.product_price + ' –≥—Ä–Ω' : ''}</td>
                        <td><span class="status">${order.status || ''}</span></td>
                        <td><button type="button" class="btn btn-secondary btn-sm order-details-btn" data-order='${JSON.stringify(order).replace(/'/g, "&apos;")}' >–î–µ—Ç–∞–ª—ñ</button></td>
                    </tr>
                `;
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–î–µ—Ç–∞–ª—ñ"
            tbody.querySelectorAll('.order-details-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    let order;
                    try {
                        order = JSON.parse(this.dataset.order.replace(/&apos;/g, "'"));
                    } catch {
                        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
                        return;
                    }
                    showOrderDetailsModal(order);
                });
            });
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
            if (ordersLoading) ordersLoading.style.display = 'none';
            tbody.innerHTML = `<tr><td colspan="6" style="text-align:center;color:#c00;">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å</td></tr>`;
        });
    }

    // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ ---
    function showOrderDetailsModal(order) {
        let modal = document.getElementById('orderDetailsModal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'orderDetailsModal';
            modal.className = 'order-details-modal';
            modal.innerHTML = `
                <div class="order-details-modal-content">
                    <span class="order-details-modal-close" style="float:right;cursor:pointer;font-size:1.5rem;">&times;</span>
                    <h3>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #ORD-${order.id}</h3>
                    <div class="order-details-modal-body"></div>
                </div>
            `;
            document.body.appendChild(modal);
        }
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–º–∏
        const body = modal.querySelector('.order-details-modal-body');
        body.innerHTML = `
            <table class="order-details-table" style="width:100%;margin-bottom:1rem;">
                <tr><td><b>–î–∞—Ç–∞:</b></td><td>${order.created_at ? new Date(order.created_at).toLocaleString('uk-UA') : ''}</td></tr>
                <tr><td><b>–ù–∞–∑–≤–∞:</b></td><td>${order.product_name || order.service_name || ''}</td></tr>
                <tr><td><b>–°—É–º–∞:</b></td><td>${order.product_price ? order.product_price + ' –≥—Ä–Ω' : ''}</td></tr>
                <tr><td><b>–°—Ç–∞—Ç—É—Å:</b></td><td>${order.status || ''}</td></tr>
                <tr><td><b>–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞:</b></td><td>${order.customer_name || ''}</td></tr>
                <tr><td><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b></td><td>${order.customer_phone || ''}</td></tr>
                <tr><td><b>Email:</b></td><td>${order.customer_email || ''}</td></tr>
                <tr><td><b>–ê–¥—Ä–µ—Å–∞:</b></td><td>${order.customer_address || ''}</td></tr>
            </table>
        `;
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É
        modal.style.display = 'flex';
        // –ó–∞–∫—Ä—ã—Ç–∏–µ
        modal.querySelector('.order-details-modal-close').onclick = function() {
            modal.style.display = 'none';
        };
        modal.onclick = function(e) {
            if (e.target === modal) modal.style.display = 'none';
        };
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å inline —Å–∫—Ä–∏–ø—Ç–æ–º)
    window.loadOrders = loadUserOrders;
});