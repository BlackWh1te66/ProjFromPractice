// –ü–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
let currentOrder = null;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥
function displayServices(servicesToDisplay) {
    const servicesGrid = document.getElementById('servicesGrid');
    
    if (!servicesGrid) {
        console.error('Services grid element not found');
        return;
    }
    
    servicesGrid.innerHTML = '';

    if (servicesToDisplay.length === 0) {
        servicesGrid.innerHTML = `
            <div class="no-results">
                <i class="fas fa-search"></i>
                <p>–ü–æ—Å–ª—É–≥–∏ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</p>
            </div>
        `;
        return;
    }

    servicesToDisplay.forEach(service => {
        const serviceCard = document.createElement('div');
        serviceCard.className = 'service-card';
        serviceCard.dataset.id = service.id;
        serviceCard.dataset.category = service.category;
        serviceCard.dataset.type = service.type;
        serviceCard.dataset.time = service.time;
        serviceCard.dataset.price = service.price;
        serviceCard.dataset.title = service.title.toLowerCase();
        serviceCard.dataset.description = service.description.toLowerCase();

        let badgeHtml = '';
        if (service.badge) {
            badgeHtml = `<span class="service-badge">${service.badge}</span>`;
        }

        let timeText = '';
        switch(service.time) {
            case 'fast':
                timeText = '–®–≤–∏–¥–∫–∏–π (–¥–æ 1 –¥–Ω—è)';
                break;
            case 'standard':
                timeText = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π (2-3 –¥–Ω—ñ)';
                break;
            case 'long':
                timeText = '–¢—Ä–∏–≤–∞–ª–∏–π (–≤—ñ–¥ 3 –¥–Ω—ñ–≤)';
                break;
            default:
                timeText = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π (2-3 –¥–Ω—ñ)';
        }

        serviceCard.innerHTML = `
            <div class="service-image" style="background-image: url('${service.image}');">
                ${badgeHtml}
            </div>
            <div class="service-content">
                <h3 class="service-title">${service.title}</h3>
                <p class="service-description">${service.description}</p>
                <div class="service-price">${service.price} –≥—Ä–Ω</div>
                <div class="service-time">
                    <i class="fas fa-clock"></i> ${timeText}
                </div>
                <button class="service-btn" data-id="${service.id}">–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É</button>
            </div>
        `;

        servicesGrid.appendChild(serviceCard);
    });

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    document.querySelectorAll('.service-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const serviceId = parseInt(this.dataset.id);
            const service = window.services.find(s => s.id === serviceId);
            if (service) {
                openOrderModal(service);
            }
        });
    });
}

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
function openOrderModal(service) {
    currentOrder = service;
    const modal = document.getElementById('orderModal');
    const orderInfo = document.getElementById('orderServiceInfo');
    
    if (!modal || !orderInfo) {
        console.error('Modal elements not found');
        return;
    }
    
    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–ª—É–≥—É
    let timeText = '';
    switch(service.time) {
        case 'fast':
            timeText = '–®–≤–∏–¥–∫–∏–π (–¥–æ 1 –¥–Ω—è)';
            break;
        case 'standard':
            timeText = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π (2-3 –¥–Ω—ñ)';
            break;
        case 'long':
            timeText = '–¢—Ä–∏–≤–∞–ª–∏–π (–≤—ñ–¥ 3 –¥–Ω—ñ–≤)';
            break;
        default:
            timeText = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π (2-3 –¥–Ω—ñ)';
    }
    
    orderInfo.innerHTML = `
        <div class="order-info-item">
            <span class="order-info-label">–ü–æ—Å–ª—É–≥–∞:</span>
            <span class="order-info-value">${service.title}</span>
        </div>
        <div class="order-info-item">
            <span class="order-info-label">–¶—ñ–Ω–∞:</span>
            <span class="order-info-value">${service.price} –≥—Ä–Ω</span>
        </div>
        <div class="order-info-item">
            <span class="order-info-label">–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:</span>
            <span class="order-info-value">${timeText}</span>
        </div>
    `;
        
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
function closeOrderModal() {
    const modal = document.getElementById('orderModal');
    if (modal) {
        modal.classList.remove('active');
        document.body.style.overflow = '';
    }
}

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
function handleOrderSubmit(e) {
    e.preventDefault();

    let name, phone, email, address;
    if (window.authUser) {
        name = window.authUser.first_name || '';
        phone = window.authUser.phone || '';
        email = window.authUser.email || '';
        address = document.getElementById('clientAddress').value;
    } else {
        name = document.getElementById('clientName').value;
        phone = document.getElementById('clientPhone').value;
        email = document.getElementById('clientEmail').value;
        address = document.getElementById('clientAddress').value;
    }

    if (!name.trim() || !phone.trim() || !currentOrder) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è!');
        return;
    }

    let csrfToken = document.querySelector('meta[name="csrf-token"]');
    csrfToken = csrfToken ? csrfToken.getAttribute('content') : null;

    fetch('/order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            ...(csrfToken ? { 'X-CSRF-TOKEN': csrfToken } : {})
        },
        body: JSON.stringify({
            product_id: currentOrder.id,
            product_name: currentOrder.title,
            product_price: String(currentOrder.price).replace(/[^\d.]/g, ''), // –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ!
            customer_name: name,
            customer_phone: phone,
            customer_email: email,
            customer_address: address
        })
    })
    .then(async res => {
        let data;
        let text;
        try {
            text = await res.text();
            data = JSON.parse(text);
        } catch (e) {
            alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n' + (text || e));
            return;
        }
        if (data && data.success) {
            alert('–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.');
            closeOrderModal();
            document.getElementById('orderForm').reset();
        } else {
            alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! ' + (data && data.message ? data.message : ''));
        }
    })
    .catch((err) => {
        console.error('Order submission error:', err);
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!');
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—Å–ª—É–≥
function filterServices() {
    const searchInput = document.getElementById('searchInput');
    const priceRange = document.getElementById('priceRange');
    const maxPriceValue = document.getElementById('maxPriceValue');
    
    if (!searchInput || !priceRange || !maxPriceValue) {
        console.error('Filter elements not found');
        return;
    }
    
    const searchText = searchInput.value.toLowerCase();
    const selectedCategory = document.querySelector('.category-item.active a')?.dataset.category || 'all';
    const maxPrice = parseInt(priceRange.value);

    maxPriceValue.textContent = `${maxPrice}`;

    const filteredServices = window.services.filter(service => {
        // –ü–æ—à—É–∫ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
        const matchesSearch = searchText === '' || 
            service.title.toLowerCase().includes(searchText) || 
            service.description.toLowerCase().includes(searchText);
        
        // –§—ñ–ª—å—Ç—Ä –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
        const matchesCategory = selectedCategory === 'all' || String(service.category) === String(selectedCategory);
        
        // –§—ñ–ª—å—Ç—Ä –∑–∞ —Ü—ñ–Ω–æ—é
        const matchesPrice = service.price <= maxPrice;
        
        return matchesSearch && matchesCategory && matchesPrice;
    });

    displayServices(filteredServices);
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–º–∏
function initTheme() {
    const themeSwitcher = document.getElementById('themeSwitcher');
    const savedTheme = localStorage.getItem('theme');
    
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-theme');
        if (themeSwitcher) themeSwitcher.textContent = '‚òÄÔ∏è';
    } else {
        document.body.classList.remove('dark-theme');
        if (themeSwitcher) themeSwitcher.textContent = 'üåì';
    }
    
    if (themeSwitcher) {
        themeSwitcher.addEventListener('click', function() {
            document.body.classList.toggle('dark-theme');
            const isDark = document.body.classList.contains('dark-theme');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
            themeSwitcher.textContent = isDark ? '‚òÄÔ∏è' : 'üåì';
        });
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
function initPage() {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–º–∏
    initTheme();

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ –º–µ–Ω—é –ø—Ä–æ—Ñ—ñ–ª—é
    const profileDropdownBtn = document.getElementById('profileDropdownBtn');
    const profileDropdownMenu = document.getElementById('profileDropdownMenu');
    if (profileDropdownBtn && profileDropdownMenu) {
        profileDropdownBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            this.parentElement.classList.toggle('open');
        });
        document.addEventListener('click', function(e) {
            if (!profileDropdownBtn.contains(e.target)) {
                profileDropdownBtn.parentElement.classList.remove('open');
            }
        });
    }

    console.log('Initializing page...');
    console.log('Available services:', window.services);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—è –ø–æ—Å–ª—É–≥–∏
    if (!window.services || window.services.length === 0) {
        console.warn('No services loaded from PHP');
        const servicesGrid = document.getElementById('servicesGrid');
        if (servicesGrid) {
            servicesGrid.innerHTML = `
                <div class="no-results">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥</p>
                </div>
            `;
        }
        return;
    }
    
    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—Å—ñ –ø–æ—Å–ª—É–≥–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    displayServices(window.services);
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—à—É–∫—É
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', filterServices);
    }
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    document.querySelectorAll('.category-item a').forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            document.querySelectorAll('.category-item').forEach(el => el.classList.remove('active'));
            this.parentElement.classList.add('active');
            filterServices();
        });
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–∑—É–Ω–∫–∞ —Ü—ñ–Ω–∏
    const priceRange = document.getElementById('priceRange');
    if (priceRange) {
        priceRange.addEventListener('input', filterServices);
    }
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    const closeModalBtn = document.getElementById('closeModal');
    if (closeModalBtn) {
        closeModalBtn.addEventListener('click', closeOrderModal);
    }
    
    const orderModal = document.getElementById('orderModal');
    if (orderModal) {
        orderModal.addEventListener('click', function(e) {
            if (e.target === this) {
                closeOrderModal();
            }
        });
    }

    // –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
    const orderForm = document.getElementById('orderForm');
    if (orderForm) {
        orderForm.addEventListener('submit', handleOrderSubmit);
    }

    // –ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (window.authUser) {
        if (document.getElementById('clientName')) {
            document.getElementById('clientName').value = window.authUser.first_name || '';
        }
        if (document.getElementById('clientPhone')) {
            document.getElementById('clientPhone').value = window.authUser.phone || '';
        }
        if (document.getElementById('clientEmail')) {
            document.getElementById('clientEmail').value = window.authUser.email || '';
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener('DOMContentLoaded', initPage);

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–µ —Ä–∞–∑ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
window.addEventListener('load', function() {
    if (!window.services || window.services.length === 0) {
        console.error('Services still not loaded after page load');
    }
});